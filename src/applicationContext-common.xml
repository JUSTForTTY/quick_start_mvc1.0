<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:flex="http://www.springframework.org/schema/flex" xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring     
  		   http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.2.xsd
  		   http://www.springframework.org/schema/flex
		   http://www.springframework.org/schema/flex/spring-flex-1.5.xsd">

	<!-- bean 扫描路径 -->
	<context:component-scan base-package="com.tcj.work">
		<!-- context:include-filter type="regex" expression="demo\.spring\..*"/ 
			<context:include-filter type="regex" expression="com\.baobaotao\.service\..*"/> 
			<context:exclude-filter type="aspectj" expression="com.baobaotao.util..*"/> -->
	</context:component-scan>
	<context:component-scan base-package="com.tcj.domains"></context:component-scan>
	<!-- bean 扫描路径 -->
	<context:component-scan base-package="com.tcj.common">
	</context:component-scan>

	<!-- aspectj的注解支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"
		expose-proxy="true" />

	<!-- 常用配置说明 -->
	<bean id="propertyConfiggurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源 -->
	<bean id="dataSource" class="com.tcj.common.dhcp.DataSource"
		destroy-method="close">

		<property name="databasename">
			<value>${db.database}</value>
		</property>
		<property name="driverClassName">
			<value>${db.driver}</value>
		</property>
		<property name="initialSize">
			<value>${db.initialSize}</value>
		</property>
		<property name="maxIdle">
			<value>${db.maxIdle}</value>
		</property>
		<property name="minIdle">
			<value>${db.minIdle}</value>
		</property>
		<property name="maxActive">
			<value>${db.maxActive}</value>
		</property>
		<property name="url">
			<value>${db.url}</value>
		</property>
		<property name="username">
			<value>${db.user}</value>
		</property>
		<property name="password">
			<value>${db.password}</value>
		</property>
		<property name="testOnBorrow">

         <value>true</value>

         </property>

         <property name="validationQuery">

         <value>SELECT 1 </value>

         </property>
		
		
		
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    <property name="maxUploadSize" value="10485760" />  
     </bean>

	<!-- 连接工厂 3.annotation.AnnotationSessionFactoryBean <property name="lobHandler" 
		ref="mysqlLobHandler" /> -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext 
					</prop> -->
			</props>
		</property>
		<property name="packagesToScan" value="com.tcj.domains" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务的属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="selectWrite*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="change*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 切面配置, -->
	<aop:config expose-proxy="true">
		<aop:pointcut id="serviceOperation"
			expression="execution(public * com.tcj.work.*.service.*.*(..)) " />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<!-- 数据库操作类 -->
	<bean id="baseDao" class="com.tcj.common.dao.impl.BaseDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="splitPageDao" class="com.tcj.common.dao.impl.SplitPageDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- xfire webservice配置 -->
	<import resource="classpath:org/codehaus/xfire/spring/xfire.xml" />
	<bean id="webAnnotations"
		class="org.codehaus.xfire.annotations.jsr181.Jsr181WebAnnotations"
		lazy-init="false" />
	<bean id="jsr181HandlerMapping" class="org.codehaus.xfire.spring.remoting.Jsr181HandlerMapping"
		lazy-init="false">
		<property name="xfire" ref="xfire" />
		<property name="webAnnotations" ref="webAnnotations" />
	</bean>

	<bean id="log4jSetParam" class="com.tcj.common.log4j.Log4jSetParam">
	</bean>
	<!-- process系统设置 <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration"> 
		<property name="dataSource" ref="dataSource" /> <property name="transactionManager" 
		ref="transactionManager" /> <property name="databaseSchemaUpdate" value="true" 
		/> <property name="jobExecutorActivate" value="false" /> </bean> <bean id="processEngine" 
		class="org.activiti.spring.ProcessEngineFactoryBean"> <property name="processEngineConfiguration" 
		ref="processEngineConfiguration" /> </bean> <bean id="repositoryService" 
		factory-bean="processEngine" factory-method="getRepositoryService" /> <bean 
		id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" 
		/> <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" 
		/> <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" 
		/> <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" 
		/> <bean id="formService" factory-bean="processEngine" factory-method="getFormService" 
		/> -->

	<import resource="spring-dwr.xml" />
</beans>